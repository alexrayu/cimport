<?php

/**
 * @file
 * Commerce import custom module.
 *
 */

// Include the includes.
foreach (glob(drupal_get_path('module', 'cimport') . "/includes/*.inc") as $filename) {
  include $filename;
}

// Include the classes bases.
foreach (glob(drupal_get_path('module', 'cimport') . "/includes/base/*.php") as $filename) {
  include_once $filename;
}

// Include the classes descendants.
foreach (glob(drupal_get_path('module', 'cimport') . "/includes/desc/*.php") as $filename) {
  include_once $filename;
}

/**
 * Return import config.
 *
 * Use this to configure the import.
 */
function cimport_get_config() {
  $config = array(
    'source' => array(
      'map' => array(
        'term-l1',
        'term-l2',
        'manufacturer',
        'title',              // Don't rename this field.
        'descr',
        'qty',
        'unused-size',
        'unused-color',
        'unused-other_attr',
        'contract',
        'contract_price',
        'sale_price',
        'qty_uoi',
        'unit',
        'fob',
        'sev',
        'pn',
        'coo',
        'weight',
        'height',
        'unused-shipping',
        'files',                 // Don't rename this field.
      ),
      // Lines to skip in CSV (when used as headings).
      'skip' => 1,
      // Images source path prefix.
      'file_path_prefix' => '*',
      // Generate SKU if missing.
      'generate_sku' => TRUE,
      // Import even if files missing.
      'ignore_missing_files' => TRUE,
      // Rename all files to lowercase.
      'files_tolower' => TRUE,
    ),
    'dest' => array(
      // Product type to use.
      'type' => 'product',
      // Destination dir where to move the files.
      'dest_dir' => 'public://products',
      // Product Display ct.
      'content_type' => 'product_display',
      // Product Display reference field name.
      'product_field' => 'field_product',
    ),
  );

  return $config;
}


/**
 * Drush import callback.
 */
function cimport_run($run_conf = array()) {
  $config = cimport_get_config();

  // Get data
  $Source = new DSCSource($config['source']);
  $data = $Source->getData();
  $count = $Source->count();
  $count_products = $count['products'];
  $count_nodes = $count['nodes'];
  $media = $Source->getMedia();
  unset($Source);

  // No data. Quit.
  if (!count($data)) {
    if (function_exists('drush_log')) {
      drush_log('No valid data to import.', 'error');
    }
    return;
  }

  // Broken images. Quit.
  if (count($media['missing'])) {
    if (empty($config['source']['ignore_missing_files']) || !$config['source']['ignore_missing_files']) {
      if (function_exists('drush_log')) {
        drush_log(count($media['missing']) . ' files missing. Override inactive. Will not import.', 'error');
      }
      return;
    }
    else {
      if (function_exists('drush_log')) {
        drush_log(count($media['missing']) . ' files missing. Override active. Import commencing.', 'warning');
      }
    }
  }

  // Main Loop
  $count = 0;
  foreach ($data as $pack) {
    // Create products, gather id's.
    $products = array();
    foreach ($pack['items'] as $entry) {
      $count++;
      $Product = new DSCProduct($entry, $config['dest']);
      $product = $Product->getProduct();
      if (!empty($product->sku)) {
        $products[] = $product;
      }
      unset($Product);

      if (function_exists('drush_log')) {
        _drush_print_progress($count / $count_products);
      }
    }

    if (empty($run_conf['products_only'])) {
      $Display = new DSCDisplay($products, $config['dest'], $pack);
      unset($Display);
    }
  }

  return array(
    'products' => $count_products,
    'nodes' => $count_nodes,
  );
}

/**
 * Drush stats callback.
 */
function cimport_stats() {
  $config = cimport_get_config();

  // Get data
  $Source = new DSCSource($config['source']);
  $count = $Source->count();
  $count['media'] = $Source->getMedia();
  unset($Source);

  return $count;
}

/**
 * Implements hook_drush_help().
 */
function cimport_drush_help($command) {
  switch ($command) {
    case 'drush:my-command':
      return dt('Run my command');
  }
}

/**
 * Deletes listed products.
 * @param bool $run
 *  If not TRUE, will perform an empty, stats run.
 * @return array
 */
function cimport_del($run = FALSE) {
  $config = cimport_get_config();
  $Eraser = new DSCEraser($config);
  if ($run === TRUE) {
    $Eraser->run();
    $del_nodes = $Eraser->delNodesCount();
  }
  $count = $Eraser->count();
  $del_nodes = $Eraser->delNodesCount();
  unset($Eraser);

  return array(
    'prods' => $count,
    'nodes' => $del_nodes,
  );
}