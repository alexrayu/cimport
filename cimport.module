<?php

/**
 * @file
 * Commerce import custom module.
 *
 */

/**
 * Ignore missing files during import.
 */
define('CIMPORT_IGNORE_MISSING_FILES', TRUE);

// Include the includes.
foreach (glob(drupal_get_path('module', 'cimport') . "/includes/*.inc") as $filename) {
  include $filename;
}

// Include the classes bases.
foreach (glob(drupal_get_path('module', 'cimport') . "/includes/base/*.php") as $filename) {
  include $filename;
}

// Include the classes descendants.
foreach (glob(drupal_get_path('module', 'cimport') . "/includes/desc/*.php") as $filename) {
  include $filename;
}

/**
 * Return import config.
 *
 * Use this to configure the import.
 */
function cimport_get_config() {
  $config = array(
    'source' => array(
      // Field to group products into displays.
      'group_field' => 'group',
    ),
    'dest' => array(
      // Product type to use.
      'type' => 'product',
      // Destination dir where to move the files.
      'dest_dir' => 'public://products',
      // Product Display ct.
      'content_type' => 'product_display',
      // Product Display reference field name.
      'product_field' => 'field_product',
    ),
  );

  return $config;
}


/**
 * Drush import callback.
 */
function cimport_run($run_conf = array()) {
  $config = cimport_get_config();

  // Get data.
  $source = new DSCSource($config['source']);
  $data = $source->getData();
  $count = $source->count();
  $count_products = $count['products'];
  $count_nodes = $count['nodes'];
  $media = $source->getMedia();
  unset($source);

  // No data. Quit.
  if (!count($data)) {
    if (function_exists('drush_log')) {
      drush_log('No valid data to import. Quit.', 'error');
    }
    return FALSE;
  }

  // Missing files. Warn.
  if (count($media['missing'])) {
    if (function_exists('drush_log')) {
      drush_log(count($media['missing']) . ' files missing.', 'warning');
      if (!CIMPORT_IGNORE_MISSING_FILES) {
        return FALSE;
      }
    }
  }

  // Main Loop.
  $count = 0;
  foreach ($data as $pack) {
    $products = array();
    foreach ($pack as $entry) {
      $count++;
      $product = new DSCProduct($entry, $config['dest']);
      $the_product = $product->getProduct();
      if (!empty($the_product->sku)) {
        $products[] = $the_product;
      }
      unset($product);

      if (function_exists('drush_log')) {
        _drush_print_progress($count / $count_products);
      }
    }

    if (empty($run_conf['products_only'])) {
      $display = new DSCNode($products, $config['dest'], $pack);
      unset($display);
    }
  }

  return array(
    'products' => $count_products,
    'nodes' => $count_nodes,
  );
}

/**
 * Drush stats callback.
 */
function cimport_stats() {
  $config = cimport_get_config();

  // Get data.
  $source = new DSCSource($config['source']);
  $count = $source->count();
  $count['media'] = $source->getMedia();
  unset($source);

  return $count;
}

/**
 * Implements hook_drush_help().
 */
function cimport_drush_help($command) {
  switch ($command) {
    case 'drush:my-command':
      return dt('Run my command');
  }
}

/**
 * Deletes listed products.
 *
 * @param bool $run
 *    If not TRUE, will perform an empty, stats run.
 *
 * @return array
 *    Operation result.
 */
function cimport_del($run = FALSE) {
  $config = cimport_get_config();
  $eraser = new DSCEraser($config);
  $del_prods = $eraser->count();
  if ($run === TRUE) {
    $eraser->run();
    $del_prods = $eraser->delProdsCount();
  }
  $del_nodes = $eraser->delNodesCount();

  unset($eraser);

  return array(
    'prods' => $del_prods,
    'nodes' => $del_nodes,
  );
}
